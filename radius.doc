Instalação:
[shacoradius:~]# apt-get install freeradius
Pacotes instalados:
	freeradius		freeradius-common	freeradius-utils
	libdbi-perl		libfreeradius2		libltdl7
	libnet-daemon-perl	libpcap0.8		libperl5.14
	libplrpc-perl		libpython2.7		ssl-cert
#obs: FreeRadius Version 2.1.12

[shacoradius:~]# apt-get install freeradius-krb5
Pacotes instalados:
	freeradius-krb5

Teste inicial:
Editar o arquivo users adicionando a seguinte linha de teste
	root@shacoradius: ~> vim /etc/freeradius/clients.conf
		user_name Cleartext-Password := "password"
	obs: substituir o user_name e o password por um teste adequado
	obs2: deixar o password entre aspas
Iniciar o servidor em modo debugging
	root@shacoradius: ~> freeradius -X
	obs: caso servidor ja estiver rodando, aparecerá uma mensagem de erro.
		Failed binding to authentication address * port 1812: Address already in use /etc/freeradius/radiusd.conf[240]: Error binding to port for 0.0.0.0 port 1812
		Neste caso pare o serviço antes de iniciar em modo teste
			root@shacoradius: ~> service freeradius stop
			root@shacoradius: ~> freeradius -X
Rodar o radtest de um outro terminal
	 root@shacoradius: ~> radtest "user_name" password 127.0.0.1 0 testing123

Deve aparecer uma resposta do servidor com a mensagem Access-Accept.

Configurar os clientes:
	root@shacoradius: ~> vim /etc/freeradius/clients.conf
		client 192.168.240.52 {
			secret		= "SharedPhrase" 
			shortname	= roteador_bcc
		}


Configurando o freeradius com krb5 (ttls-pap):
Editar o modulo do krb5
	root@shacoradius: ~> vim /etc/freeradius/modules/krb5
		krb5 {
			keytab = /etc/krb5.keytab
			service_principal = shacoradius.linux.ime.usp.br
		}
Editar o arquivo de sites disponiveis
	root@shacoradius: ~> vim /etc/freeradius/sites-available/default
	####Logo abaixo da sessão authenticate {
	# Autenticao via Kerberos
	Auth-Type Kerberos {
		krb5
	}
	####Também comentei as opcoes de digest e unix autentication
Editar as configuracoes do protocolo pap
	root@shacoradius: ~> vim /etc/freeradius/eap.conf
		eap {
			default_eap_type = ttls
			timer_expire = 60
			ignore_unknown_eap_types = no
			cisco_accounting_username_bug = no
			max_sessions = 2048
		 	tls {
				certdir = ${confdir}/certs
				cadir = ${confdir}/certs
				private_key_password = wahtever
				private_key_file = ${certdir}/serverkey.key
				certificate_file = ${certdir}/server.pem
				dh_file = ${certdir}/dh
				random_file = /dev/urandom
				cipher_list = "DEFAULT"
				make_cert_command = "${certdir}/bootstrap"
			}
			cache {
				enable = no
				max_entries = 255
			}
	 
			ttls {
				default_eap_type = md5
				copy_request_to_tunnel = yes
				use_tunneled_reply = yes
				virtual_server = "inner-tunnel"
			}
		}
Por algum motivo essas configuracoes não sao suficientes para conectar via ttls-pap. Entao adicionei a autenticacao via kerberos tambem no arquivo de configuracao do inner-tunnel.
	root@shacoradius: ~> vim /etc/freeradius/sites-enabled/inner-tunnel
		#teste de adicionar o Kerberos no tunel
		Auth-Type Kerberos {
			krb5
		}
		
Logging:
Editar o arquivo radius.conf
	root@shacoradius: ~> vim /etc/freeradius/radiusd.conf
		resquests = ${logdir}/radiusd-%{%{Virtual-Server}:-DEFAULT}-%Y%m%d.log
		auth = yesroot@shacoradius: ~> vim /etc/freeradius/radiusd.conf

Importante configurar o roteador para manter o link entre os MACs e os IPs internos recebidos!
Para melhorar o desempenho do servidor também foi desligada a opcao de proxing:
	comentar as seguintes linhas do arquivo radius conf
		root@shacoradius: ~> vim /etc/freeradius/radiusd.conf
			proxy_request = yes
			$INCLUDE proxy.conf

